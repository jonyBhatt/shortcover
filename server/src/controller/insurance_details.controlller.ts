import { Request, Response } from "express";
import {
  createInsuranceDetailsSchema,
  CreateInsuranceDetailsType,
} from "../dto/insurance.dto";
import { prisma } from "../utils/db";
import nodemailer from "nodemailer";
import fs from "fs";
import PDFDocument from "pdfkit";
import path from "path";

// Pdf Generation
const generatePDF = (
  userData: {
    reason: string;
    durationType: string;
    length: string;
    date: string;
    time: string;
    endDate: string;
    driverTitle: string;
    driverFirstName: string;
    driverLastName: string;
    firstLineAddress: string;
    secondLineAddress: string;
    town: string;
    postCode: string;
    county: string;
    dob: string;
    job: string;
    driverEmail: string;
    driverPhone: string;
    country: string;
    licenseType: string;
    drivingLicenseNumber: string;
    extraDriver: string;
    totalPayable: string;
  },
  filePath: string
): void => {
  const doc = new PDFDocument({ margin: 50 });

  // Write the PDF to the file system
  doc.pipe(fs.createWriteStream(filePath));

  // Add Title
  doc
    .fontSize(25)
    .fillColor("blue")
    .text("Driver and License Information", { align: "center" });

  // Add some spacing
  doc.moveDown();

  // Draw a line separator
  doc.lineWidth(1).moveTo(50, 90).lineTo(550, 90).stroke();

  // Section: Reason and Duration
  doc.fontSize(18).fillColor("black").text("Details", { underline: true });
  doc.moveDown();

  doc.fontSize(12).fillColor("black").text(`Reason: ${userData.reason}`);
  doc.text(`Duration Type: ${userData.durationType}`);
  doc.text(`Length: ${userData.length}`);
  doc.text(`Start Date: ${userData.date}`);
  doc.text(`Time: ${userData.time}`);
  doc.text(`End Date: ${userData.endDate}`);

  // Add some spacing
  doc.moveDown(2);

  // Section: Driver Information
  doc
    .fontSize(18)
    .fillColor("black")
    .text("Driver Information", { underline: true });
  doc.moveDown();

  doc
    .fontSize(12)
    .text(
      `Name: ${userData.driverTitle} ${userData.driverFirstName} ${userData.driverLastName}`
    );
  doc.text(`Date of Birth: ${userData.dob}`);
  doc.text(`Job: ${userData.job}`);
  doc.text(`Email: ${userData.driverEmail}`);
  doc.text(`Phone: ${userData.driverPhone}`);

  // Add some spacing
  doc.moveDown(1);

  // Section: Address
  doc
    .fontSize(18)
    .fillColor("black")
    .text("Address Information", { underline: true });
  doc.moveDown();

  doc.fontSize(12).text(`First Line: ${userData.firstLineAddress}`);
  doc.text(`Second Line: ${userData.secondLineAddress}`);
  doc.text(`Town: ${userData.town}`);
  doc.text(`Post Code: ${userData.postCode}`);
  doc.text(`County: ${userData.county}`);
  doc.text(`Country: ${userData.country}`);

  // Add some spacing
  doc.moveDown(1);

  // Section: License Information
  doc
    .fontSize(18)
    .fillColor("black")
    .text("License Information", { underline: true });
  doc.moveDown();

  doc.fontSize(12).text(`License Type: ${userData.licenseType}`);
  doc.text(`Driving License Number: ${userData.drivingLicenseNumber}`);
  doc.text(`Extra Driver: ${userData.extraDriver}`);

  doc.moveDown(1); // Add space before Total Payable
  doc.lineWidth(2).fillColor("red");
  doc.text("Total Amount:", { underline: true });
  doc.fontSize(20).fillColor("black").text(`Â£${userData.totalPayable}`);

  // Footer
  doc.moveDown(3);
  doc
    .fontSize(10)
    .fillColor("gray")
    .text("Generated by ShortCover", { align: "center" });

  doc.end(); // Finalize the PDF and end the stream
};

// Nodemailer Setup
const transporter = nodemailer.createTransport({
  service: "gmail", // You can use any email service (e.g., Gmail, Yahoo, etc.)
  auth: {
    user: "jonybhattacharjee886@gmail.com", // Your email address
    pass: process.env.APP_PASSWORD, // Your email password or app-specific password
  },
});

// Create Insurance Details

export const createInsuranceDetails = async (
  req: Request<{}, {}, CreateInsuranceDetailsType>,
  res: Response
) => {
  console.log(req.body);

  const body = createInsuranceDetailsSchema.parse({
    ...req.body,
  });

  if (!body) {
    return res.status(400).json({ message: "Fields are required" });
  }

  try {
    const insuranceDetails = await prisma.insuranceDetails.create({
      data: body,
    });

    const filePath = path.join(
      __dirname,
      `${body.driverFirstName}_details.pdf`
    );
    generatePDF(body, filePath);

    await transporter.sendMail({
      from: "makhtaruzjaman@gmail.com", // Sender address
      to: body.driverEmail, // Receiver address
      subject: "Your Details PDF",
      text: "Please find the attached PDF with your details.",
      attachments: [
        {
          filename: `${body.driverFirstName}_details.pdf`,
          path: filePath, // Path to the generated PDF
        },
      ],
    });

    return res.status(201).json({
      success: true,
      insuranceDetails,
    });
  } catch (error) {
    return res.status(500).json({
      success: false,
      error,
    });
  }finally {
    const filePath = path.join(
      __dirname,
      `${body.driverFirstName}_details.pdf`
    );
    // Clean up the generated PDF file (optional)
    fs.unlink(filePath, (err) => {
        if (err) console.error('Error deleting PDF:', err);
    });
}
};

// const userData = {
//   reason: 'Traveling to work',
//   durationType: 'Weekly',
//   length: '1 week',
//   date: '2024-09-10',
//   time: '08:00 AM',
//   endDate: '2024-09-17',
//   driverTitle: 'Mr.',
//   driverFirstName: 'John',
//   driverLastName: 'Doe',
//   firstLineAddress: '123 Main St.',
//   secondLineAddress: 'Apartment 4B',
//   town: 'New York',
//   postCode: '10001',
//   county: 'New York',
//   dob: '1990-01-01',
//   job: 'Software Engineer',
//   driverEmail: 'john.doe@example.com',
//   driverPhone: '+1234567890',
//   country: 'USA',
//   licenseType: 'Full',
//   drivingLicenseNumber: 'ABC123456',
//   extraDriver: 'No',
//   totalPayable: '200'
// };

// export const sendInsuranceDetailsEmail = async (
//   req: Request,
//   res: Response
// ) => {
//   const transporter = nodemailer.createTransport({
//     service: "gmail", // You can use any email service (e.g., Gmail, Yahoo, etc.)
//     auth: {
//       user: "jonybhattacharjee886@gmail.com", // Your email address
//       pass: process.env.APP_PASSWORD, // Your email password or app-specific password
//     },
//   });

//   // Generate PDF

//   const filePath = path.join(__dirname, `insurance_details.pdf`);
//   generatePDF(
//     userData,
//     filePath
//   );

//   try {
//     const info = await transporter.sendMail({
//       from: "makhtaruzjaman@gmail.com", // Sender address
//       to: "bhattjony9@gmail.com", // Receiver address
//       subject: "Your Details PDF",
//       text: "Please find the attached PDF with your details.",
//       attachments: [
//         {
//           filename: `insurance_details.pdf`,
//           path: filePath, // Path to the generated PDF
//         },
//       ],
//     });

//     return res.status(200).json(info);
//   } catch (error) {
//     console.log(error);
//     return res.status(500).json(error);
//   }finally {
//     // Clean up the generated PDF file (optional)
//     fs.unlink(filePath, (err) => {
//         if (err) console.error('Error deleting PDF:', err);
//     });
// }
// };
